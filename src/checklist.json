{
  "heading": "The software development team checklist",
  "description": "This checklist introduces methodologies to assess software development teams from several perspectives. The selection of questions is based on my knowledge and preference, so it may not suitable for everyone. If some sections do not apply to your team, please switch them off, or you can fork this repo and build your own version.",
  "sections": [
    {
      "subject": "The Joel Test for 2017",
      "link": "https://myers.io/2017/04/04/the-joel-test-for-2017/",
      "description": "",
      "items": [
        "Are all builds handled automatically by a Continuous Integration server?",
        "Do you make and use daily builds?",
        "Do you use an issue tracker?",
        "Do you fix bugs before writing new code?",
        "Do you have an up-to-date schedule?",
        "Do you have up to date information on your products performance and usage?",
        "Do you use the best tools money can buy?",
        "Do you have a comprehensive test plan?",
        "Do you have dedicated UI and UX designers?",
        "Does all code go through code review?",
        "Do you have coding standards?",
        "Are new employees given training?"
      ]
    },
    {
      "subject": "What is an Engineer Culture",
      "link": "https://translate.google.com/translate?hl=en&sl=zh-CN&tl=en&u=https%3A%2F%2Fcoolshell.cn%2Farticles%2F17497.html",
      "description": "",
      "items": [
        "Self driven",
        "Flexible working hours and locations",
        "Information equality",
        "Not afraid of mistakes",
        "Loose approval system or even does not have one",
        "20% free time",
        "Simplification",
        "Automation, cruel and ruthless",
        "Avoid inefficient organizational structures and management",
        "The correct component abstraction",
        "Develop high quality products",
        "Constantly raise the standard and recruit the best people",
        "Create a culture of continuous improvement"
      ]
    },
    {
      "subject": "The Twelve-Factor App",
      "link": "https://12factor.net/",
      "description": "",
      "items": [
        "I. Codebase: One codebase tracked in revision control, many deploys",
        "II. Dependencies: Explicitly declare and isolate dependencies",
        "III. Config: Store config in the environment",
        "IV. Backing services: Treat backing services as attached resources",
        "V. Build, release, run: Strictly separate build and run stages",
        "VI. Processes: Execute the app as one or more stateless processes",
        "VII. Port binding: Export services via port binding",
        "VIII. Concurrency: Scale out via the process model",
        "IX. Disposability: Maximize robustness with fast startup and graceful shutdown",
        "X. Dev/prod parity: Keep development, staging, and production as similar as possible",
        "XI. Logs: Treat logs as event streams",
        "XII. Admin processes: Run admin/management tasks as one-off processes"
      ]
    },
    {
      "subject": "Best Practices for Building a Microservice Architecture",
      "link": "https://www.vinaysahni.com/best-practices-for-building-a-microservice-architecture",
      "description": "",
      "items": [
        "Maximize team autonomy: Teams can get more done without having to coordinate with other teams",
        "Optimize for development speed: Hardware is cheap, people are not",
        "Independently developed & deployed: No coordination should be needed with other service teams",
        "Private data ownership: Each service should have its own private data",
        "Aggregation services on network boundaries: Limit the amount of business logic in an aggregation service",
        "Security: Do not write your own crypto code",
        "Communication protocols: We'll need to account for both synchronous and asynchronous communications.",
        "Versioning: All supported versions should co-exist in the same codebase and the same service instances",
        "Risks of shared libraries: Service specific business logic should stay out of shared libraries",
        "Full Lifecycle Ownership: Service teams should own, operate and evolve the services they build"
      ]
    },
    {
      "subject": "The 4 essential questions to ask yourself as a leader",
      "link": "https://m.signalvnoise.com/four-essential-questions-to-ask-yourself-as-leader/",
      "description": "",
      "items": [
        "Can I create an environment for people to do their best work?",
        "Can I create as much clarity and coherence about what needs to get done and why?",
        "Can I personally model the behavior I want to be true across my team?",
        "Can I see things for what they are, instead of what I want them to be?"
      ]
    },
    {
      "subject": "The Programmer's Bill of Rights",
      "link": "https://blog.codinghorror.com/the-programmers-bill-of-rights/",
      "description": "",
      "items": [
        "Every programmer shall have two monitors",
        "Every programmer shall have a fast PC",
        "Every programmer shall have their choice of mouse and keyboard",
        "Every programmer shall have a comfortable chair",
        "Every programmer shall have a fast internet connection",
        "Every programmer shall have quiet working conditions"
      ]
    }
  ]
}
